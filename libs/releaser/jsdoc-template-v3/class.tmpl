<!-- ============================== header ================================= -->
{+include("static/header.html")+}

{!
	var classType = [];

	if (data.isBuiltin()) {
		classType.push("Built-In");
	}

	if (data.isNamespace) {
		if (data.is('FUNCTION')) {
			classType.push("Function");
		}
		classType.push("Namespace");
	} else {
		classType.push("Class");
	}
	
	classType.join(" ");

	var ownProperties = data.properties.filter(function ($) { return !$.isNamespace; }).sort( makeSortby("name") );
	var ownMethods = data.methods.filter(function ($) { return !$.isNamespace; }).sort( makeSortby("name") );
	var ownEvents = data.events.filter(function ($) { return !$.isNamespace; }).sort( makeSortby("name") );

	var getExamplesAndDescriptions = function(data){
		var examples = [];

		for(var e in data.example){
			examples.push({
				"code": data.example[e],
				"description": data.exampleDescription[e]
			});
		}

		return examples;
	};

	var getBorrowed = function(type){

		var borrowedMembers = data[type].filter(function($) {return $.memberOf != data.alias});
		var borrowedProperties = "";
		var contributers = [];

		borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
		
		for (var i = 0, l = contributers.length; i < l; i++) {
			borrowedProperties +=
				"<p>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": "
				+
				borrowedMembers
				.filter(
					function($) { return $.memberOf == contributers[i] }
				)
				.sort(makeSortby("name"))
				.map(
					function($) { return new Link().toSymbol($.alias).withText($.name)}
				)
				+
				"</p>";
		}
			borrowedProperties += arr.join(""); 
		return borrowedProperties;
	};
	
	var indexCont = 3;

!}

<section class="main">
	<article class="ch-g3-4">
		<div class="ch-leftcolumn">

			<!-- Title -->
			<h1>{+data.alias+} <small>({+classType+})</small></h1>
			<p class="updated">
				{! var date = new Date(); !}
				Doc updated on <data>{+date.toDateString()+}</data>, generated by 
				<a href="http://code.google.com/p/jsdoc-toolkit/" target="_blankt">JsDoc Toolkit</a>.
			</p>



<if test="!data.isBuiltin() && data.is('CONSTRUCTOR')">

		<if test="data.is('CONSTRUCTOR') && !data.isNamespace">
			<h2 id="overview">Overview</h2>
			<p>
				<if test="data.augments.length">
					{+data.alias+} extends

					{# harcoded to show only the first augments #}
					{+
						data.augments
						.sort()
						.map(
							function($) { return new Link().toSymbol($); }
						)[0]
					+}.
				</if>
				{+resolveLinks(data.desc)+}
			</p>
			<p><a href="https://github.com/mercadolibre/chico/blob/master/src/js/{+data.classDesc.toLowerCase()+}.js#L1" target="_blank">View source on GitHub</a></p>
			<if test="data.requires.length">
				<h3>Requires</h3>
				<ul class="ch-list">
					<for each="item" in="data.requires">
						<li>{+ new Link().toSymbol(item) +}</li>
					</for>
				</ul>
			</if>

			<if test="data.returns.length">
				<h3>Returns</h3>
				
				<for each="item" in="data.returns">
					<article>
						{+(item.type ? " <code>" + (new Link().toSymbol(item.type)) + "</code>" : "")+}
						<p>{+resolveLinks(item.desc)+}</p>
					</article>
				</for>
				
			</if>

			<!-- Instanciation -->
			
			
			<if test="data.example.length">
				<h2 id="use">Use</h2>
				{! var examples = getExamplesAndDescriptions(data); !}
				<for each="index" in="examples">
					<p>{+index.description+}</p>
					<pre>{+index.code+}</pre>
				</for>
			</if>
			
			<if test="data.params.length">
				<h3 id="configuration">Configuration</h3>
				<p>The following options lets you create a customized {+data.alias+}.</p>
				<ul class="ch-list parameters">
					<for each="item" in="data.params">
						<li>
							<code>{+item.name+}</code><if test="data.deprecated"> (Deprecated)</if><if test="data.since"> (Since {+ data.since +}</if>: {+(item.type ? "<em class='"+(item.type+"").toLowerCase()+"'>" + (new Link().toSymbol(item.type)) + "</em>" : "")+} {+resolveLinks(item.desc)+}<if test="item.defaultValue"> <em>Default: {+item.defaultValue+}</em></if>
						</li>
					</for>
				</ul>
			</if>
			
			
			<!--if test="data.exceptions.length">
				<h4>Throws</h4>
				<ul class="ch-list">
					<for each="item" in="data.exceptions">
						<li>
							{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
						</li>
					<dd>{+resolveLinks(item.desc)+}</dd>
					</for>
				</ul>
			</if-->



		<!-- Returned Object -->
		<if test="(ownMethods.length || ownProperties.length) && data.name!='Positioner'">
			<h2 id="returnedPublicObject">Returns</h2>
			<!--p>The Returned Object is the result of the component instanciation.</p-->
			<if test="ownProperties.length">
				<h3>Properties</h3>
				<!-- Accordion -->
				<section class="accordion properties">
					<for each="member" in="ownProperties">				
						<if test="member.comment.getTag('public')[0]">	
						<article id="{+Link.symbolNameToLinkName(member)+}">
							<h3 class="nameDescription">
								<span class="fixedFont">
									<!--if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if-->
									{+member.name+}
								</span>
							</h3>
							<div class="description">
								<p>{+resolveLinks(member.desc)+}</p>
								<p><em class="{+member.type+}">{+member.type+}</em></p>
								<p>
									<if test="member.deprecated">(Deprecated)</if>
									
									<if test="member.since"> (Since {+ member.since +}</if> 
									
									
									
									<if test="member.isOptional">, <em>Optional</em></if>
									

									<if test="member.defaultValue"> <em>Default: {+member.defaultValue+}</em></if>

								</p>	
								<if test="member.see.length">
									<p><strong>See also:</strong> 
										<for each="item" in="member.see">
											<span>{+ new Link().toSymbol(item) +}</span>
											<if test="!$item_last">,</if>
										</for>
									</p>
								</if>
								
								<if test="member.example.length">
									<h4>Examples</h4>
									{! var examples = getExamplesAndDescriptions(member); !}
									<for each="index" in="examples">
										<p>{+index.description+}</p>
										<pre>{+index.code+}</pre>
									</for>
									
								</if>
							</div>
						</article>
						</if>
					</for>
				</section>
			</if>
			<if test="ownMethods.length">
				<h3>Methods</h3>
				<section class="accordion methods">
					<for each="member" in="ownMethods">
						<if test="member.comment.getTag('public')[0]">
							<article id="{+Link.symbolNameToLinkName(member)+}">
								<h3 class="nameDescription">
									<span class="fixedFont">
										<!--if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if-->
										{+member.name.replace(/\^\d+$/, '')+}{+makeSignature(member.params)+}
									</span>
								</h3>
								<div class="description">
									<p>{+resolveLinks(member.desc)+}</p>
									<if test="member.memberOf != data.alias">											
										<p>It method borrows {+ new Link().toSymbol(member.memberOf+'#'+member.name) +}.</p>
									</if>
									<if test="member.params.length">
										<h4>Parameters</h4>
										<ul class="ch-list parameters">
											<for each="item" in="member.params">
												<li>
													<code>{+item.name+}</code><if test="member.deprecated"> (Deprecated)</if><if test="member.since"> Since {+ member.since +}</if>: {+(item.type ? "<em class='"+item.type+"'>" + (new Link().toSymbol(item.type)) + "</em>" : "")+}<if test="item.isOptional">, <em>Optional</em>.</if> {+resolveLinks(item.desc)+}<if test="item.defaultValue"> <em>Default: {+item.defaultValue+}</em></if>
												</li>
											</for>
										</ul>
									</if>
									<if test="member.exceptions.length">
										<h4>Throws</h4>
										<ul class="ch-list">
											<for each="item" in="member.exceptions">
												<li>
													{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
													<p>{+resolveLinks(item.desc)+}</p>
												</li>
											</for>
										</ul>
									</if>
									<if test="member.requires.length">
										<h4>Requires</h4>
										<ul class="ch-list">
											<for each="item" in="member.requires">
												<li>{+ new Link().toSymbol(item) +}</li>
											</for>
										</ul>
									</if>
									<if test="member.returns.length">
										<h4>Returns</h4>
										<ul class="ch-list">
											<for each="item" in="member.returns">
												<li>
													{+resolveLinks(item.desc)+}{+(item.type ? " (" + (new Link().toSymbol(item.type)) + ")" : "")+}
												</li>
											</for>
										</ul>
									</if>
									<if test="member.see.length">
										<h4>See also:</h4> 
										<p>
											<for each="item" in="member.see">
												<span>{+ new Link().toSymbol(item) +}</span>
												<if test="!$item_last">,</if>
											</for>
										</p>
									</if>
									<if test="member.example.length">
										<h4>Examples</h4>
										{! var examples = getExamplesAndDescriptions(member); !}
										<for each="index" in="examples">
											<p>{+index.description+}</p>
											<pre>{+index.code+}</pre>
										</for>
										
									</if>
								</div>
							</article>						
						</if>
					</for>
				</section>
			</if>
		</if>

		<if test="ownEvents.length && data.name!='Positioner'">
			<h2>Events</h2>
			<!--p>The {+data.alias+} triggers some events.</p>
			<h3>List of events</h3-->
			<section class="accordion">
				<for each="member" in="ownEvents">
					<if test="member.comment.getTag('public')[0]">
						<article id="{+Link.symbolNameToLinkName(member)+}">
							<h3 class="nameDescription">
								<span class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if>{+member.name+}
								</span>
							</h3>
							<div class="description">
								{+resolveLinks(member.desc)+}

								<if test="member.example.length">
									<div class="examples">
										<h4>Examples</h4>
										<div>
											{! var examples = getExamplesAndDescriptions(member); !}
											<for each="index" in="examples">
												<p>{+index.description+}</p>
												<pre>{+index.code+}</pre>
											</for>
										</div>
									</div>
								</if>
								
								<if test="member.params.length">
									<h4>Parameters</h4>
									<ul class="ch-list parameters">
										<for each="item" in="member.params">
											<li>
												<code>{+item.name+}</code><if test="member.deprecated"> (Deprecated)</if><if test="member.since"> (Since {+ data.since +}</if>: {+(item.type ? "<em>" + (new Link().toSymbol(item.type)) + "</em>" : "")+}<if test="item.isOptional">, <em>Optional</em></if>. {+resolveLinks(item.desc)+}<if test="item.defaultValue"> <em>Default: {+item.defaultValue+}</em></if>
											</li>
										</for>
									</ul>
								</if>
								
								<if test="member.exceptions.length">
									<h4>Throws</h4>
									<ul class="ch-list">
										<for each="item" in="member.exceptions">
											<li>
												{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
											</li>
										<dd>{+resolveLinks(item.desc)+}</dd>
										</for>
									</ul>
								</if>
								<if test="member.returns.length">
									<h4>Returns</h4>
									<ul class="ch-list">
										<for each="item" in="member.returns">
											<li>
												{+resolveLinks(item.desc)+}{+(item.type ? " (" + (new Link().toSymbol(item.type)) + ")" : "")+}
											</li>
										</for>
									</ul>
								</if>
								<if test="member.requires.length">
									<h4>Requires</h4>
									<ul class="ch-list">
										<for each="item" in="member.requires">
											<li>{+ new Link().toSymbol(item) +}</li>
										</for>
									</ul>
								</if>
								<if test="member.see.length">
									<h4>See</h4>
									<ul class="ch-list">
										<for each="item" in="member.see">
											<li>{+ new Link().toSymbol(item) +}</li>
										</for>
									</ul>
								</if>
							</div>
						</article>
					</if>
				</for>
			</section>
		</if>
		
	</if>
</if>



<if test="data.isNamespace">
	<h2>Overview</h2>
	<p>{+resolveLinks(summarize(data.desc))+}</p>

	
		{!
			var nsp = data.properties.filter(function ($) { return $; }).sort( makeSortby("name") );
		!}
	
		<for each="item" in="nsp">
			<article>
				<h3>{+ item.name +}</h3>
				<p><code>{+ item.alias +}</code> {+ item.desc +}</p>
				
			</article>
		</for>
	
</if>





	



<!-- ============================== classes index ============================ -->
</article>
<aside class="ch-g1-4 api">
	<if test="data.see.length">
		<h2>Related Info</h2>
		<h3>Components</h3>
		<ul class="ch-list">
			<for each="item" in="data.see">
				<li>{+ new Link().toSymbol(item) +}</li>
			</for>
		</ul>
	</if>
</aside>
</section>



			<!--div class="contents">
				<h5>Contents</h5>
				<dl>
					<dt><a href="#overview">1 Overview</a></dt>
					<dt><a href="#summary">2 Summary</a></dt>
					<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
						<dt><a href="#detail">{+(indexCont++)+} {+classType+}detail</a></dt>
					</if>
					<if test="defined(ownProperties) && ownProperties.length">
						<dt><a href="#properties-detail">{+(indexCont++)+} Properties detail</a></dt>
					</if>
					<if test="defined(ownMethods) && ownMethods.length">
						<dt><a href="#methods-detail">{+(indexCont++)+} Methods detail</a></dt>
					</if>
					<if test="defined(ownEvents) && ownEvents.length">
						<dt><a href="#events-detail">{+(indexCont++)+} Events detail</a></dt>
					</if>
				</dl>
			</div-->



<!-- ============================== footer ================================= -->

{+include("static/footer.html")+}