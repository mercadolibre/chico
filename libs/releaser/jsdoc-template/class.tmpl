<!-- ============================== header ================================= -->
{+include("static/header.html")+}

{!
	var classType = [];

	if (data.isBuiltin()) {
		classType.push("Built-In");
	}

	if (data.isNamespace) {
		if (data.is('FUNCTION')) {
			classType.push("Function");
		}
		classType.push("Namespace");
	} else {
		classType.push("Class");
	}
	
	classType.join(" ");

	var ownProperties = data.properties.filter(function ($) {
		return $.memberOf == data.alias && !$.isNamespace;
	}).sort(makeSortby("name"));

	var ownMethods = data.methods.filter(function ($) {
		return $.memberOf == data.alias && !$.isNamespace;
	}).sort(makeSortby("name"));
	
	var ownEvents = data.events.filter(function ($) {
		return $.memberOf == data.alias && !$.isNamespace;
	}).sort(makeSortby("name"));
	
	var indexCont = 3;

!}

<section class="main">
	<!--nav class="breadcrumb"><a href="/">Home</a> → <a href="/api">API Docs</a> → {+data.alias+}</nav-->
	<article class="ch-g4-5">
		<div class="ch-leftcolumn">

<!-- ============================== class title ============================ -->

<h1>{+data.alias+} <small>({+classType+})</small></h1>
<p class="updated">Documentation updated on <data>{+new Date()+}</data>, generated by <a href="http://code.google.com/p/jsdoc-toolkit/" target="_blankt">JsDoc Toolkit</a> {+JSDOC.VERSION+}</p>

<div class="contents">
	<h5>Contents</h5>
	<dl>
		<dt><a href="#overview">1 Overview</a></dt>
		<dt><a href="#summary">2 Summary</a></dt>
		<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
			<dt><a href="#detail">{+(indexCont++)+} {+classType+}detail</a></dt>
		</if>
		<if test="defined(ownProperties) && ownProperties.length">
			<dt><a href="#properties-detail">{+(indexCont++)+} Properties detail</a></dt>
		</if>
		<if test="defined(ownMethods) && ownMethods.length">
			<dt><a href="#methods-detail">{+(indexCont++)+} Methods detail</a></dt>
		</if>
		<if test="defined(ownEvents) && ownEvents.length">
			<dt><a href="#events-detail">{+(indexCont++)+} Events detail</a></dt>
		</if>
	</dl>
</div>

<!-- ============================== constructor summary ==================== -->
<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">

<h3 id="overview">Overview</h3>

<p>{+resolveLinks(summarize(data.desc))+}</p>

<!-- ============================== class summary ========================== -->
<ul class="ch-list">
	<li>Constructor name: {+ new Link().toSymbol(data.alias).inner('constructor')+}<if test="classType != 'Namespace'"><a href="#params">{+ makeSignature(data.params) +}</a></if></li>
	<if test="data.augments.length">
		<li>{+data.alias+} extends
		{+
			data.augments
			.sort()
			.map(
				function($) { return new Link().toSymbol($); }
			)
			.join(", ")
		+}.</li>
	</if>
	<li><a href="https://github.com/mercadolibre/chico/blob/master/src/js/{+data.classDesc.toLowerCase()+}.js#L1" target="_blank">View source on GitHub</a>.</li>
</ul>

</if>

<!-- ============================== Summary ==================== -->
<h3 id="summary">Summary</h3>

<div id="members-tabs">
    <ul>
    	<li><a href="#properties">Properties</a></li>
        <li><a href="#methods">Methods</a></li>
        <li><a href="#events">Events</a></li>
    </ul>
   	<div>
		<div id="properties">
<!-- ============================== properties summary ===================== -->
			<if test="data.properties.length">
				<if test="ownProperties.length">
				<table class="summaryTable ch-datagrid" cellspacing="0" summary="A summary of the fields documented in the class {+data.alias+}.">
					<!--caption>Field Summary</caption-->
					<thead>
						<tr>							
							<th scope="col">Visibility</th>
							<th scope="col">Name</th>
							<th scope="col">Description</th>
						</tr>
					</thead>
					<tbody>
					<for each="member" in="ownProperties">
						<tr>
							<td class="attributes">
							<!-- # start Public & protected scope fix # -->
								<if test="member.comment.getTag('public')[0]">&lt;public&gt;</if>
								<if test="member.comment.getTag('protected')[0]">&lt;protected&gt;</if>
							<!-- # end Public & protected scope fix # -->
							{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
								if (member.isConstant) output += "&lt;constant&gt; ";
							!}&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont">
								<if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>
								</div>
							</td>
							<td class="nameDescription">
								<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
							</td>
						</tr>
					</for>
					</tbody>
				</table>
				</if>
				
				<if test="data.inheritsFrom.length">
				{!
					var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
					
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<p>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": "
							+
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name)}
							)
							+
							"</p>";
					}
				!}
				</if>
			</if>
		</div>
		<div id="methods">
<!-- ============================== methods summary ======================== -->

			<if test="data.methods.length">
				{! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownMethods.length">
				<table class="summaryTable ch-datagrid" cellspacing="0" summary="A summary of the methods documented in the class {+data.alias+}.">
					<!--caption>Method Summary</caption-->
					<thead>
						<tr>
							<th scope="col">Visibility</th>
							<th scope="col">Name</th>
							<th scope="col">Description</th>
						</tr>
					</thead>
					<tbody>
					<for each="member" in="ownMethods">
						<tr>
							<td class="attributes">
							<!-- # start Public & protected scope fix # -->
								<if test="member.comment.getTag('public')[0]">&lt;public&gt;</if>
								<if test="member.comment.getTag('protected')[0]">&lt;protected&gt;</if>
							<!-- # end Public & protected scope fix # -->
							{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
							!}&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name.replace(/\^\d+$/, ''))+}</b>{+makeSignature(member.params)+}
								</div>
							</td>
							<td class="nameDescription">
								<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
							</td>							
						</tr>
					</for>
					</tbody>
				</table>
				</if>
				
				<if test="data.inheritsFrom.length">
				{!
					var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<p>Methods borrowed from class "+new Link().toSymbol(contributers[i])+": "
							+
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</p>";
					}
				
				!}
				</if>
			</if>
		</div>
		<div id="events">
<!-- ============================== events summary ======================== -->
			<if test="data.events.length">
				<if test="ownEvents.length">
				<table class="summaryTable ch-datagrid" cellspacing="0" summary="A summary of the events documented in the class {+data.alias+}.">
					<!--caption>Event Summary</caption-->
					<thead>
						<tr>
							<th scope="col">Visibility</th>
							<th scope="col">Name</th>
							<th scope="col">Description</th>
						</tr>
					</thead>
					<tbody>
					<for each="member" in="ownEvents">
						<tr>
							<td class="attributes">
							<!-- # start Public & protected scope fix # -->
								<if test="member.comment.getTag('public')[0]">&lt;public&gt;</if>
								<if test="member.comment.getTag('protected')[0]">&lt;protected&gt;</if>
							<!-- # end Public & protected scope fix # -->
							{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
							!}&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>
								</div>
							</td>
							<td class="nameDescription">
								<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
							</td>
						</tr>
					</for>
					</tbody>
				</table>
				</if>
				
				<if test="data.inheritsFrom.length">
				{!
					var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<p>Events borrowed from class "+new Link().toSymbol(contributers[i])+": "
							+
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</p>";
					}
				
				!}
				</if>
			</if>
		</div>
    </div>
</div>

<!-- ============================== constructor details ==================== -->
<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
	
	<h3 id="detail">{+classType+}detail</h3>
	<if test="data.params.length">
		<h4>Parameters</h4>
		<ul class="ch-list parameters">
			<for each="item" in="data.params">
				<li>
					<code>{+item.name+}</code><if test="data.deprecated"> (Deprecated)</if><if test="data.since"> (Since {+ data.since +}</if>: {+(item.type ? "<em>" + (new Link().toSymbol(item.type)) + "</em>" : "")+}<if test="item.isOptional">, <em>Optional</em></if>. {+resolveLinks(item.desc)+}<if test="item.defaultValue"> <em>Default: {+item.defaultValue+}</em></if>
				</li>
			</for>
		</ul>
	</if>
	
	<if test="data.exceptions.length">
		<h4>Throws</h4>
		<ul class="ch-list">
			<for each="item" in="data.exceptions">
				<li>
					{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
				</li>
			<dd>{+resolveLinks(item.desc)+}</dd>
			</for>
		</ul>
	</if>
	<if test="data.returns.length">
		<h4>Returns</h4>
		<ul class="ch-list">
			<for each="item" in="data.returns">
				<li>
					{+resolveLinks(item.desc)+}{+(item.type ? " (" + (new Link().toSymbol(item.type)) + ")" : "")+}
				</li>
			</for>
		</ul>
	</if>
	<if test="data.requires.length">
		<h4>Requires</h4>
		<ul class="ch-list">
			<for each="item" in="data.requires">
				<li>{+ new Link().toSymbol(item) +}</li>
			</for>
		</ul>
	</if>
	<if test="data.see.length">
		<h4>See</h4>
		<ul class="ch-list">
			<for each="item" in="data.see">
				<li>{+ new Link().toSymbol(item) +}</li>
			</for>
		</ul>
	</if>
	<if test="data.example.length">
		<div class="examples">
			<h4 id="detail-examples">Examples</h4>
			<div>
				<for each="example" in="data.example">
					<pre>{+example+}</pre>
				</for>
			</div>
		</div>
	</if>

</if>
<!-- ============================== field details ========================== -->
<if test="defined(ownProperties) && ownProperties.length">
	
	<h3 id="properties-detail">Properties detail</h3>
	
	<for each="member" in="ownProperties">
		<h4 id="{+Link.symbolNameToLinkName(member)+}">
			{+ member.name +} 
			<small>(<!-- # start Public & protected scope fix # --><if test="member.comment.getTag('public')[0]">public</if><if test="member.comment.getTag('protected')[0]">protected</if><!-- # end Public & protected scope fix # -->{!
					if (member.isPrivate) output += "private";
					if (member.isInner) output += "inner";
					if (member.isStatic) output += "static";
					if (member.isConstant) output += "constant";
				!}<if test="member.type">, {+new Link().toSymbol(member.type)+}</if>)</small>
		</h4>
		
		<p>{+resolveLinks(member.desc)+}</p>
		
		<if test="member.example.length">
			<div class="examples">
				<h5>Examples</h5>
				<div>
					<for each="example" in="member.example">
						<pre class="code">{+example+}</pre>
					</for>
				</div>
			</div>
		</if>
		
		<if test="member.params.length">
			<h5>Parameters</h5>
			<ul class="ch-list parameters">
				<for each="item" in="member.params">
					<li>
						<code>{+item.name+}</code><if test="member.deprecated"> (Deprecated)</if><if test="member.since"> (Since {+ data.since +}</if>: {+(item.type ? "<em>" + (new Link().toSymbol(item.type)) + "</em>" : "")+}<if test="item.isOptional">, <em>Optional</em></if>. {+resolveLinks(item.desc)+}<if test="item.defaultValue"> <em>Default: {+item.defaultValue+}</em></if>
					</li>
				</for>
			</ul>
		</if>
		
		<if test="member.exceptions.length">
			<h5>Throws</h5>
			<ul class="ch-list">
				<for each="item" in="member.exceptions">
					<li>
						{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
					</li>
				<dd>{+resolveLinks(item.desc)+}</dd>
				</for>
			</ul>
		</if>
		<if test="member.returns.length">
			<h5>Returns</h5>
			<ul class="ch-list">
				<for each="item" in="member.returns">
					<li>
						{+resolveLinks(item.desc)+}{+(item.type ? " (" + (new Link().toSymbol(item.type)) + ")" : "")+}
					</li>
				</for>
			</ul>
		</if>
		<if test="member.requires.length">
			<h5>Requires</h5>
			<ul class="ch-list">
				<for each="item" in="member.requires">
					<li>{+ new Link().toSymbol(item) +}</li>
				</for>
			</ul>
		</if>
		<if test="member.see.length">
			<h5>See</h5>
			<ul class="ch-list">
				<for each="item" in="member.see">
					<li>{+ new Link().toSymbol(item) +}</li>
				</for>
			</ul>
		</if>
	</for>
</if>			
<!-- ============================== method details ========================= -->
<if test="defined(ownMethods) && ownMethods.length">
	<h3 id="methods-detail">Methods detail</h3>
	
	<for each="member" in="ownMethods">
		<h4 id="{+Link.symbolNameToLinkName(member)+}">
			{+ member.name +} 
			<small>(<!-- # start Public & protected scope fix # --><if test="member.comment.getTag('public')[0]">public</if><if test="member.comment.getTag('protected')[0]">protected</if><!-- # end Public & protected scope fix # -->{!
					if (member.isPrivate) output += "private";
					if (member.isInner) output += "inner";
					if (member.isStatic) output += "static";
				!}<if test="member.type">, {+new Link().toSymbol(member.type)+}</if>)</small>
		</h4>
		
		<p>{+resolveLinks(member.desc)+}</p>
		
		<if test="member.example.length">
			<div class="examples">
				<h5>Examples</h5>
				<div>
					<for each="example" in="member.example">
						<pre class="code">{+example+}</pre>
					</for>
				</div>
			</div>
		</if>
		
		<if test="member.params.length">
			<h5>Parameters</h5>
			<ul class="ch-list parameters">
				<for each="item" in="member.params">
					<li>
						<code>{+item.name+}</code><if test="member.deprecated"> (Deprecated)</if><if test="member.since"> (Since {+ data.since +}</if>: {+(item.type ? "<em>" + (new Link().toSymbol(item.type)) + "</em>" : "")+}<if test="item.isOptional">, <em>Optional</em></if>. {+resolveLinks(item.desc)+}<if test="item.defaultValue"> <em>Default: {+item.defaultValue+}</em></if>
					</li>
				</for>
			</ul>
		</if>
		
		<if test="member.exceptions.length">
			<h5>Throws</h5>
			<ul class="ch-list">
				<for each="item" in="member.exceptions">
					<li>
						{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
					</li>
				<dd>{+resolveLinks(item.desc)+}</dd>
				</for>
			</ul>
		</if>
		<if test="member.returns.length">
			<h5>Returns</h5>
			<ul class="ch-list">
				<for each="item" in="member.returns">
					<li>
						{+resolveLinks(item.desc)+}{+(item.type ? " (" + (new Link().toSymbol(item.type)) + ")" : "")+}
					</li>
				</for>
			</ul>
		</if>
		<if test="member.requires.length">
			<h5>Requires</h5>
			<ul class="ch-list">
				<for each="item" in="member.requires">
					<li>{+ new Link().toSymbol(item) +}</li>
				</for>
			</ul>
		</if>
		<if test="member.see.length">
			<h5>See</h5>
			<ul class="ch-list">
				<for each="item" in="member.see">
					<li>{+ new Link().toSymbol(item) +}</li>
				</for>
			</ul>
		</if>
	</for>
</if>
<!-- ============================== event details ========================= -->
<if test="defined(ownEvents) && ownEvents.length">
	<h3 id="events-detail">Events detail</h3>
	
	<for each="member" in="ownEvents">
		<h4 id="{+Link.symbolNameToLinkName(member)+}">
			{+ member.name +} 
			<small>(<!-- # start Public & protected scope fix # --><if test="member.comment.getTag('public')[0]">public</if><if test="member.comment.getTag('protected')[0]">protected</if><!-- # end Public & protected scope fix # -->{!
					if (member.isPrivate) output += "private";
					if (member.isInner) output += "inner";
					if (member.isStatic) output += "static";
				!}<if test="member.type">, {+new Link().toSymbol(member.type)+}</if>)</small>
		</h4>
		
		<p>{+resolveLinks(member.desc)+}</p>

		<if test="member.example.length">
			<div class="examples">
				<h5>Examples</h5>
				<div>
					<for each="example" in="member.example">
						<pre class="code">{+example+}</pre>
					</for>
				</div>
			</div>
		</if>
		
		<if test="member.params.length">
			<h5>Parameters</h5>
			<ul class="ch-list parameters">
				<for each="item" in="member.params">
					<li>
						<code>{+item.name+}</code><if test="member.deprecated"> (Deprecated)</if><if test="member.since"> (Since {+ data.since +}</if>: {+(item.type ? "<em>" + (new Link().toSymbol(item.type)) + "</em>" : "")+}<if test="item.isOptional">, <em>Optional</em></if>. {+resolveLinks(item.desc)+}<if test="item.defaultValue"> <em>Default: {+item.defaultValue+}</em></if>
					</li>
				</for>
			</ul>
		</if>
		
		<if test="member.exceptions.length">
			<h5>Throws</h5>
			<ul class="ch-list">
				<for each="item" in="member.exceptions">
					<li>
						{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
					</li>
				<dd>{+resolveLinks(item.desc)+}</dd>
				</for>
			</ul>
		</if>
		<if test="member.returns.length">
			<h5>Returns</h5>
			<ul class="ch-list">
				<for each="item" in="member.returns">
					<li>
						{+resolveLinks(item.desc)+}{+(item.type ? " (" + (new Link().toSymbol(item.type)) + ")" : "")+}
					</li>
				</for>
			</ul>
		</if>
		<if test="member.requires.length">
			<h5>Requires</h5>
			<ul class="ch-list">
				<for each="item" in="member.requires">
					<li>{+ new Link().toSymbol(item) +}</li>
				</for>
			</ul>
		</if>
		<if test="member.see.length">
			<h5>See</h5>
			<ul class="ch-list">
				<for each="item" in="member.see">
					<li>{+ new Link().toSymbol(item) +}</li>
				</for>
			</ul>
		</if>
	</for>
</if>

<!-- ============================== classes index ============================ -->
</article>
<nav class="ch-g1-5 api">
	<div class="ch-rightcolumn">
		{+publish.classesIndex+}
	</div>
</nav>
</section>

<!-- ============================== footer ================================= -->

{+include("static/footer.html")+}